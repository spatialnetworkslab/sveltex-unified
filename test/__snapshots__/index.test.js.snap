// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`codesandbox container processes correctly 1`] = `
"<iframe
  src=\\"https://codesandbox.io/embed/ozh6m?some?props\\"
  sandbox=\\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\\"
  style=\\"width:100%; height:500px; overflow:hidden;\\"
  class=\\"csb\\"
  title=\\"CodeSandbox for ./test/codesandbox/\\"
></iframe>"
`;

exports[`curlies in code blocks are escaped 1`] = `
"<pre class=\\"language-svelte\\"><code class=\\"language-svelte\\">  <span class=\\"token language-javascript\\"><span class=\\"token punctuation\\">&#123;</span>#<span class=\\"token keyword\\">if</span> x <span class=\\"token operator\\">&#62;</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">&#125;</span></span>
    <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&#60;</span>p</span><span
  class=\\"token punctuation\\"
>&#62;</span></span><span
  class=\\"token language-javascript\\"
><span class=\\"token punctuation\\">&#123;</span>x<span class=\\"token punctuation\\">&#125;</span></span> is greater than 10<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&#60;/</span>p</span><span
  class=\\"token punctuation\\"
>&#62;</span></span>
  <span class=\\"token language-javascript\\"><span class=\\"token punctuation\\">&#123;</span><span class=\\"token operator\\">/</span><span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">&#125;</span></span>
</code></pre>"
`;

exports[`curlies in in-line code are escaped 1`] = `"<p>A normal paragraph with <code>&#123;svelte&#125;</code> syntax</p>"`;

exports[`default container processes correctly 1`] = `"<div class=\\"testClass\\"><p>  some text here</p></div>"`;

exports[`highlight code block html syntax 1`] = `
"<pre class=\\"language-html\\"><code class=\\"language-html\\"><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&#60;</span>li</span><span
  class=\\"token punctuation\\"
>&#62;</span></span>my list item<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&#60;/</span>li</span><span
  class=\\"token punctuation\\"
>&#62;</span></span>
</code></pre>"
`;

exports[`highlight code block svelte syntax 1`] = `
"<pre class=\\"language-svelte\\"><code class=\\"language-svelte\\">  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&#60;</span>script</span><span
  class=\\"token punctuation\\"
>&#62;</span></span><span
  class=\\"token script\\"
><span class=\\"token language-javascript\\">
    <span class=\\"token keyword\\">let</span> x <span class=\\"token operator\\">=</span> <span class=\\"token number\\">7</span><span class=\\"token punctuation\\">;</span>
  </span></span><span
  class=\\"token tag\\"
><span class=\\"token tag\\"><span class=\\"token punctuation\\">&#60;/</span>script</span><span
  class=\\"token punctuation\\"
>&#62;</span></span>

  <span class=\\"token language-javascript\\"><span class=\\"token punctuation\\">&#123;</span>#<span class=\\"token keyword\\">if</span> x <span class=\\"token operator\\">&#62;</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">&#125;</span></span>
    <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&#60;</span>p</span><span
  class=\\"token punctuation\\"
>&#62;</span></span><span
  class=\\"token language-javascript\\"
><span class=\\"token punctuation\\">&#123;</span>x<span class=\\"token punctuation\\">&#125;</span></span> is greater than 10<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&#60;/</span>p</span><span
  class=\\"token punctuation\\"
>&#62;</span></span>
  <span class=\\"token language-javascript\\"><span class=\\"token punctuation\\">&#123;</span><span class=\\"token punctuation\\">:</span><span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token number\\">5</span> <span class=\\"token operator\\">&#62;</span> x<span class=\\"token punctuation\\">&#125;</span></span>
    <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&#60;</span>p</span><span
  class=\\"token punctuation\\"
>&#62;</span></span><span
  class=\\"token language-javascript\\"
><span class=\\"token punctuation\\">&#123;</span>x<span class=\\"token punctuation\\">&#125;</span></span> is less than 5<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&#60;/</span>p</span><span
  class=\\"token punctuation\\"
>&#62;</span></span>
  <span class=\\"token language-javascript\\"><span class=\\"token punctuation\\">&#123;</span><span class=\\"token punctuation\\">:</span><span class=\\"token keyword\\">else</span><span class=\\"token punctuation\\">&#125;</span></span>
    <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&#60;</span>p</span><span
  class=\\"token punctuation\\"
>&#62;</span></span><span
  class=\\"token language-javascript\\"
><span class=\\"token punctuation\\">&#123;</span>x<span class=\\"token punctuation\\">&#125;</span></span> is between 5 and 10<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&#60;/</span>p</span><span
  class=\\"token punctuation\\"
>&#62;</span></span>
  <span class=\\"token language-javascript\\"><span class=\\"token punctuation\\">&#123;</span><span class=\\"token operator\\">/</span><span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">&#125;</span></span>
</code></pre>"
`;

exports[`highlight code block syntax 1`] = `
"<pre class=\\"language-js\\"><code class=\\"language-js\\"><span class=\\"token keyword\\">var</span> x <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span>
</code></pre>"
`;

exports[`paragraphs within else-if blocks should be terminated 1`] = `
"{#if a < 10}
<p>One</p>
{:else if a == 10}
<p>Two</p>
{:else}
<p>Three</p>
{/if}"
`;

exports[`process math block equation 1`] = `
"<p>Using a block equation:</p>
<div class=\\"math math-display\\"><span class=\\"katex-display\\"><span class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><mi>x</mi><mo>+</mo><mn>1</mn></mrow><annotation
  encoding=\\"application/x-tex\\"
>x + 1</annotation></semantics></math></span><span
  class=\\"katex-html\\"
  aria-hidden=\\"true\\"
><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.66666em;vertical-align:-0.08333em;\\"></span><span
  class=\\"mord mathdefault\\"
>x</span><span
  class=\\"mspace\\"
  style=\\"margin-right:0.2222222222222222em;\\"
></span><span
  class=\\"mbin\\"
>+</span><span
  class=\\"mspace\\"
  style=\\"margin-right:0.2222222222222222em;\\"
></span></span><span
  class=\\"base\\"
><span class=\\"strut\\" style=\\"height:0.64444em;vertical-align:0em;\\"></span><span
  class=\\"mord\\"
>1</span></span></span></span></span></div>
<p>Continue with normal paragraph</p>"
`;

exports[`process math inline equation 1`] = `
"<p>Inline equation <span class=\\"math math-inline\\"><span class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><mi>x</mi><mo>+</mo><mn>1</mn></mrow><annotation
  encoding=\\"application/x-tex\\"
>x + 1</annotation></semantics></math></span><span
  class=\\"katex-html\\"
  aria-hidden=\\"true\\"
><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.66666em;vertical-align:-0.08333em;\\"></span><span
  class=\\"mord mathdefault\\"
>x</span><span
  class=\\"mspace\\"
  style=\\"margin-right:0.2222222222222222em;\\"
></span><span
  class=\\"mbin\\"
>+</span><span
  class=\\"mspace\\"
  style=\\"margin-right:0.2222222222222222em;\\"
></span></span><span
  class=\\"base\\"
><span class=\\"strut\\" style=\\"height:0.64444em;vertical-align:0em;\\"></span><span
  class=\\"mord\\"
>1</span></span></span></span></span></p>"
`;

exports[`svelte blocks are processed correctly 1`] = `
"{#each ['one', 'two'] as item}
  <li>{ item }</li>
{/each}
<p>This is a test { 5 < 6 }
{ true && false }
{ string === \\"string\\" }</p>
<svelte:head>
<title>Sveltex Test</title>
</svelte:head>
<script>
  let c = 'a script tag'
  $: milk = 'cookies'
  $: pine = 'apple'
</script>
<script>
    export let fill = 'black'
</script>
<p><Component cx={3} cy={3} r={3} {fill}/></p>"
`;
